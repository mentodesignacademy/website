{
  "version": 3,
  "sources": ["../src/page/home.ts", "../src/engine/core.ts", "../src/site.ts", "../src/engine/routeDispatcher.ts", "../src/page/enroll.ts", "../src/routes.ts"],
  "sourcesContent": ["\n/*\n * Page | Home\n */\n\nimport gsap from 'gsap'; \nimport { IRouteHandler } from \"../engine/routeDispatcher\";\n\n\nexport class HomePage implements IRouteHandler {\n\n  constructor() {\n  }\n  \n  setup() {\n        \n  }\n\n  exec() {\n\n    console.log(\"Home.\"); \n\n  }\n\n}\n", "\n\n// Determine Webflow breakpoint?\n\n\n// Utility function to get a query parameter value by name\nexport function getQueryParam(name: string): string | null {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get(name);\n}\n\n\n// Add a new async script to the page\n// at the end of the body\nexport function loadScript(url: string): void {\n    const script = document.createElement('script');\n    script.src = url;\n//    script.async = true;\n    document.body.appendChild(script);\n}\n\n// Add a new CSS file to the page\nexport function loadCSS(url: string): void {\n    const link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.href = url;\n    document.head.appendChild(link);\n}\n\n// Replace an existing script source\nexport function replaceScriptSource(element: HTMLScriptElement, newSrc: string): void {\n    element.src = newSrc;\n}\n\n// Replace an existing CSS source\nexport function replaceCSSLink(element: HTMLLinkElement, newHref: string): void {\n    element.href = newHref;\n}\n\n// Function to prepend text to the document title in development mode\nexport function prependToTitle(text: string): void {\n    document.title = `${text}${document.title}`;\n}\n\n// Function to get the current script URL\nexport function getCurrentScriptUrl(): string | null {\n    // Check if document.currentScript is supported\n    if (document.currentScript) {\n        // Cast to HTMLScriptElement and get the src attribute\n        const currentScript = document.currentScript as HTMLScriptElement;\n        return currentScript.src;\n    }\n    // For browsers that do not support document.currentScript\n    console.error(\"document.currentScript is not supported in this browser.\");\n    return null;\n}\n\n\nexport function findAncestorWithAttribute(element: HTMLElement, attributeName: string): HTMLElement | null {\n    let currentElement: HTMLElement | null = element;\n\n    while (currentElement) {\n        if (currentElement.hasAttribute(attributeName)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n\n    return null;\n}\n\nexport function getAncestorAttributeValue(element: HTMLElement, attributeName: string): string | null {\n    let currentElement: HTMLElement | null = element;\n\n    while (currentElement) {\n        if (currentElement.hasAttribute(attributeName)) {\n            return currentElement.getAttribute(attributeName);\n        }\n        currentElement = currentElement.parentElement;\n    }\n\n    return null;\n}\n\nexport function hasAncestorWithAttribute(element: HTMLElement, attributeName: string): boolean {\n    return findAncestorWithAttribute(element, attributeName) !== null;\n}\n\nexport function convertToPixels(value: string, contextElement: HTMLElement = document.documentElement): number {\n    // Parse the numeric value and unit, including negative values\n    const match = value.match(/^(-?\\d+\\.?\\d*)(rem|em|px|vh|vw|%)$/);\n    if (!match) throw new Error('Invalid value format');\n\n    const [, amountStr, unit] = match;\n    const amount = parseFloat(amountStr);\n\n    // Convert based on the unit\n    switch (unit) {\n        case 'px':\n            return amount;\n        case 'rem':\n            return amount * parseFloat(getComputedStyle(document.documentElement).fontSize);\n        case 'em':\n            // For 'em', it's relative to the font-size of the context element.\n            return amount * parseFloat(getComputedStyle(contextElement).fontSize);\n        case 'vh':\n            return amount * window.innerHeight / 100;\n        case 'vw':\n            return amount * window.innerWidth / 100;\n        case '%':\n            // For %, it's relative to the parent element's size. This can be tricky as it depends on the property (width, height, font-size, etc.).\n            // In this example, we'll use it relative to the width of the context element, but you might need to adjust based on your specific use case.\n            return amount * contextElement.clientWidth / 100;\n        default:\n            throw new Error('Unsupported unit');\n    }\n}\n\n\n/*\n// Example usage:\nconst pixelValue = convertToPixels(\"10vh\");\nconsole.log(pixelValue);\n*/\n\nasync function getResponseHeader(headerName: string, url: string | undefined = undefined): Promise<string | undefined> {\n\n    const headers: Headers | undefined = await getResponseHeaders(url);\n\n    if(!headers)\n        return undefined;\n\n    if(!headers.has(headerName)) \n        return undefined;\n\n    return headers[headerName];\n\n}\n\n// Function to check if the reverse proxy header is present\nasync function getResponseHeaders(url: string | undefined = undefined): Promise<Headers | undefined> {\n    try {\n\n        if(!url) {\n            url = window.location.href\n        }\n\n        const response = await fetch(url, {\n            method: 'HEAD', // Only fetch headers\n        });\n\n        return response.headers;\n\n    } catch (error) {\n        console.error('Error checking reverse proxy header:', error);\n    }\n\n    return undefined;\n}\n\n", "\n/*\n * Site\n */\n\n// import gsap from 'gsap'; \n \nimport { IRouteHandler } from \"./engine/routeDispatcher\";\nimport { loadCSS } from \"./engine/core\";\n\nexport class Site implements IRouteHandler {\n\n  constructor() {\n  }\n  \n  setup() {\n\n    // Get current script path up to index.js\n    // /css/index.css \n\n    const currentScript = document.currentScript as HTMLScriptElement;\n    \n    if (!currentScript) {\n      console.log('Could not determine the current script.');\n      return;\n    }\n\n    const fullUrl = new URL(currentScript.src);\n    const pathWithoutFile = fullUrl.origin + fullUrl.pathname.substring(0, fullUrl.pathname.lastIndexOf('/') + 1);\n//    console.log('Current script URL without file name:', pathWithoutFile);\n\nconsole.log(\"installing site CSS\")\n\n    // important - DEV, TEST, PROD\n    loadCSS(pathWithoutFile + \"css/index.css\"); \n   \n  }\n\n  exec() {\n\n    console.log(\"Site.\"); \n\n    // const elements: NodeListOf<Element> = document.querySelectorAll(`.${item.className}`);\n    // console.log(\"Making elements visible\", elements);\n    // gsap.to(elements, { display: 'block' });\n\n  }\n\n}\n", "/*\n * Sygnal\n * Route Dispatcher\n * \n */\n\n \n\nexport interface IRouteHandler {\n\n    setup();\n    \n    exec();\n  \n  }\n  \n//import { IRouteHandler } from \"./IRouteHandler\";\nimport { Site } from \"../site\";\n\ntype RouteHandler = () => void;\ntype RouteHandlerClass = { new (): IRouteHandler };\n\nexport interface Routes {\n    [path: string]: RouteHandlerClass;\n}\n\nexport class RouteDispatcher {\n\n    routes!: Routes;\n\n    constructor() {\n    }\n\n    matchRoute(path: string): RouteHandlerClass | null {\n        for (const route in this.routes) {\n            if (route.endsWith('*')) {\n                // If the route ends with *, treat it as a wildcard\n                const baseRoute = route.slice(0, -1); // Remove the * from the end\n                if (path.startsWith(baseRoute)) {\n                    return this.routes[route];\n                }\n            } else if (route === path) {\n                // Exact match\n                return this.routes[route];\n            }\n        }\n        return null; // No matching route found\n    }\n    \n    setupRoute() {\n\n        // Pre-init site-level\n        (new Site().setup());\n\n        // Pre-init route-level\n        const path = window.location.pathname;\n        const HandlerClass = this.matchRoute(path);\n        if (HandlerClass) {\n            const handlerInstance = new HandlerClass();\n            handlerInstance.setup(); \n        } else {\n//            console.log('No specific function for this path.');\n        }\n    }\n\n    execRoute() {\n\n        // Init site-level\n        (new Site().exec());\n\n        // Init route-level\n        const path = window.location.pathname;\n        const HandlerClass = this.matchRoute(path);\n        if (HandlerClass) {\n            const handlerInstance = new HandlerClass();\n            handlerInstance.exec(); \n        } else {\n//            console.log('No specific function for this path.');\n        }\n    }\n    \n}", "\n/*\n * Page | Enroll\n */\n\nimport gsap from 'gsap'; \nimport { IRouteHandler } from \"../engine/routeDispatcher\";\nimport { loadCSS } from '../engine/core';\n\n\nexport class EnrollPage implements IRouteHandler {\n\n//  private apiKey: string = '7f3ae77e18be4b6ab41486af8fe348b9';\n  private emailField: HTMLInputElement;\n  private phoneField: HTMLInputElement;\n  private emailValidationMessage: HTMLDivElement; \n  private phoneValidationMessage: HTMLDivElement; \n  private form: HTMLFormElement; \n\n  constructor() { \n//        this.apiKey = ''; //  apiKey;\n  }\n  \n  setup() {\n        \n    // BUG: \n    loadCSS('http://127.0.0.1:3000/dist/css/enroll.css')\n\n  }\n\n  exec() {\n\n    this.form = document.getElementById('enroll-form') as HTMLFormElement;\n    this.form.addEventListener('submit', (event) => this.handleSubmit(event)); \n\n    // Email validation setup \n    this.emailField = document.getElementById('enroll-form-email') as HTMLInputElement;\n    this.emailValidationMessage = document.getElementById('email-validation-message') as HTMLDivElement;\n    this.emailField.addEventListener('blur', () => this.validateEmail());\n\n    // Phone validation setup \n    this.phoneField = document.getElementById('enroll-form-phone') as HTMLInputElement;\n    this.phoneValidationMessage = document.getElementById('phone-validation-message') as HTMLDivElement;\n    this.phoneField.addEventListener('blur', () => this.validatePhone());\n\n  }\n\n  async validateEmail(): Promise<boolean> {\n    const email = this.emailField.value;\n\n    if (!email) {\n        this.showEmailValidationMessage('Email field cannot be empty.', 'error');\n        return false; \n    }\n\n    const url = `https://www.mentodesign.academy/.api/validate/email?email=${encodeURIComponent(email)}`;\n\n    try { \n        const response = await fetch(url);\n        const data = await response.json();\n\n        console.log(response); \n\n        if (data.status === 'valid') {\n            this.showEmailValidationMessage('Email is valid.', 'success');\n            return true; \n          } else {\n            this.showEmailValidationMessage(`Email validation failed: ${data.sub_status || data.status}`, 'error');\n            return false; \n          }\n    } catch (error) {\n        this.showEmailValidationMessage('Error validating email.', 'error');\n        return false; \n    }\n  }\n\n  async validatePhone(): Promise<boolean> {\n    const phone = this.phoneField.value;\n\n    if (!phone) {\n        this.showPhoneValidationMessage('Phone number field cannot be empty.', 'error');\n        return false; \n    }\n\n    const url = `https://www.mentodesign.academy/.api/validate/phone?phone=${encodeURIComponent(phone)}`;\n\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\nconsole.log(data); \n        if (data.status === 'success' && data?.data.status === 'valid') {\n            this.showPhoneValidationMessage('Phone number is valid.', 'success'); \n            return true; \n          } else {\n            this.showPhoneValidationMessage(`Phone number validation failed: ${data.sub_status || data.status}`, 'error');\n            return false; \n          }\n    } catch (error) {\n        this.showPhoneValidationMessage('Error validating phone number.', 'error');\n        return false; \n    }\n  }\n\n  private showEmailValidationMessage(message: string, type: 'success' | 'error'): void {\n    this.emailValidationMessage.textContent = message;\n    this.emailValidationMessage.className = type;\n    this.emailValidationMessage.style.display = 'block';\n  }\n\n  private showPhoneValidationMessage(message: string, type: 'success' | 'error'): void {\n    this.phoneValidationMessage.textContent = message;\n    this.phoneValidationMessage.className = type;\n    this.phoneValidationMessage.style.display = 'block';\n  } \n\n  private async handleSubmit(event: Event): Promise<void> {\n    event.preventDefault();\n\n    const emailValid = await this.validateEmail();\n    const phoneValid = await this.validatePhone();\n\n    if (emailValid && phoneValid) {\n        this.form.submit();\n    } else {\n        console.log('Form validation failed.');\n    }\n  }\n\n}\n", "/*\n * SITE\n * Main entry point\n * \n * https://engine.sygnal.com/\n * \n * ENGINE MODE\n * ?engine.mode=dev\n * ?engine.mode=prod\n * \n */\n\nimport { HomePage } from \"./page/home\";\nimport { RouteDispatcher } from \"./engine/routeDispatcher\";\nimport { EnrollPage } from \"./page/enroll\";\n\nexport const routeDispatcher = (): RouteDispatcher => {\n    \n    var routeDispatcher = new RouteDispatcher();\n    routeDispatcher.routes = {\n\n        // Site pages\n        '/': HomePage,\n\n        // Test pages\n        '/test/enroll': EnrollPage, \n\n    };\n\n    return routeDispatcher;\n}\n\n"],
  "mappings": "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",
  "names": ["routeDispatcher"]
}
