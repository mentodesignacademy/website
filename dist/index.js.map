{
  "version": 3,
  "sources": ["../src/page/home.ts", "../src/routeDispatcher.ts", "../src/site.ts", "../src/version.ts", "../src/index.ts"],
  "sourcesContent": ["\n/*\n * Page | Home\n */\n\nimport gsap from 'gsap'; \n \n\nexport class HomePage {\n\n//  modelDropdown: WebflowDropdown; \n\n  constructor() {\n  }\n  \n  init() {\n\n    console.log(\"Home.\"); \n\n\n\n    // const elements: NodeListOf<Element> = document.querySelectorAll(`.${item.className}`);\n    // console.log(\"Making elements visible\", elements);\n    // gsap.to(elements, { display: 'block' });\n\n\n  }\n\n  \n  \n\n\n\n}\n", "/*\n * Sygnal\n * Route Dispatcher\n * \n */\n\ntype RouteHandler = () => void;\n\nexport interface Routes {\n    [path: string]: RouteHandler;\n}\n\n// Example routes\nconst routes: Routes = {\n    '/': () => {\n        console.log('This is the homepage.');\n    },\n    '/about': () => {\n        console.log('This is the about page.');\n    },\n    '/contact/*': () => {\n        console.log('This is the contact page.');\n    },\n};\n\nexport class RouteDispatcher {\n\n    routes: Routes;\n\n    constructor() {\n//        this.routes = {};\n    }\n\n    matchRoute(path: string): RouteHandler | null {\n        for (const route in this.routes) {\n            if (route.endsWith('*')) {\n                // If the route ends with *, treat it as a wildcard\n                const baseRoute = route.slice(0, -1); // Remove the * from the end\n                if (path.startsWith(baseRoute)) {\n                    return this.routes[route];\n                }\n            } else if (route === path) {\n                // Exact match\n                return this.routes[route];\n            }\n        }\n        return null; // No matching route found\n    }\n    \n    dispatchRoute() {\n        const path = window.location.pathname;\n        const handler = this.matchRoute(path);\n        if (handler) {\n            handler();\n        } else {\n            console.log('No specific function for this path.');\n            // Default function or behavior for unspecified paths\n        }\n    }\n    \n    \n}", "\n/*\n * Site\n */\n\nimport gsap from 'gsap'; \n \n\nexport class Site {\n\n  constructor() {\n  }\n  \n  init() {\n\n    console.log(\"Site.\"); \n\n    // const elements: NodeListOf<Element> = document.querySelectorAll(`.${item.className}`);\n    // console.log(\"Making elements visible\", elements);\n    // gsap.to(elements, { display: 'block' });\n\n  }\n\n}\n", "\n// version.ts\nexport const VERSION = '0.1.0'; // Update this manually on each release\n\n", "/*\n * Index  \n * Main entry point\n * \n * Reference project-\n * https://sygnal-site-engine.webflow.io/\n * https://sygnal-site-engine.design.webflow.com/ \n * \n * ENGINE MODE\n * ?engine.mode=dev\n * ?engine.mode=prod\n * \n */\n\nimport { HomePage } from \"./page/home\";\nimport { RouteDispatcher } from \"./routeDispatcher\";\nimport { Site } from \"./site\";\nimport { VERSION } from \"./version\";\n\n// Global vars\nconst SITE_NAME = 'Site';\n\n// GSAP\n// Luxon\n// Cookies\n// Templatting, like handlebars \n// Howler\n\n\n// Global object\nwindow[SITE_NAME] = window[SITE_NAME] || {}; \nvar SiteData = window[SITE_NAME];\n\n// Extend the Window interface to include fsAttributes\ndeclare global {\n    interface Window {\n      fsAttributes: [string, (filterInstances: any[]) => void][];\n\n    //   modelsDataSourceElems: NodeListOf<HTMLElement>;\n    //   modelsSelectElem: HTMLElement | null;\n    //   modelsNavElem: HTMLElement | null;\n    }\n}\n\nconst init = () => {\n    \n    console.log(`${SITE_NAME} package init v${VERSION}`);\n\n    // Perform Site-wide actions\n    (new Site()).init();\n\n    // Perform Page-specific actions\n    var routeDispatcher = new RouteDispatcher();\n    routeDispatcher.routes = {\n        '/': () => {\n\n            (new HomePage()).init();\n\n        }\n    };\n    routeDispatcher.dispatchRoute(); \n}\n\n/**\n * Bootstrap\n */\n\nif (document.readyState !== 'loading') {\n    console.log('document is already ready, just execute code here');\n    init();\n} else {\n    console.log('document was not ready, place code here');\n    document.addEventListener(\"DOMContentLoaded\", init);\n}\n\n\n\n"],
  "mappings": ";;AAQO,MAAM,WAAN,MAAe;AAAA,IAIpB,cAAc;AAAA,IACd;AAAA,IAEA,OAAO;AAEL,cAAQ,IAAI,OAAO;AAAA,IASrB;AAAA,EAOF;;;ACRO,MAAM,kBAAN,MAAsB;AAAA,IAIzB,cAAc;AAAA,IAEd;AAAA,IAEA,WAAW,MAAmC;AAC1C,iBAAW,SAAS,KAAK,QAAQ;AAC7B,YAAI,MAAM,SAAS,GAAG,GAAG;AAErB,gBAAM,YAAY,MAAM,MAAM,GAAG,EAAE;AACnC,cAAI,KAAK,WAAW,SAAS,GAAG;AAC5B,mBAAO,KAAK,OAAO;AAAA,UACvB;AAAA,QACJ,WAAW,UAAU,MAAM;AAEvB,iBAAO,KAAK,OAAO;AAAA,QACvB;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IAEA,gBAAgB;AACZ,YAAM,OAAO,OAAO,SAAS;AAC7B,YAAM,UAAU,KAAK,WAAW,IAAI;AACpC,UAAI,SAAS;AACT,gBAAQ;AAAA,MACZ,OAAO;AACH,gBAAQ,IAAI,qCAAqC;AAAA,MAErD;AAAA,IACJ;AAAA,EAGJ;;;ACrDO,MAAM,OAAN,MAAW;AAAA,IAEhB,cAAc;AAAA,IACd;AAAA,IAEA,OAAO;AAEL,cAAQ,IAAI,OAAO;AAAA,IAMrB;AAAA,EAEF;;;ACrBO,MAAM,UAAU;;;ACkBvB,MAAM,YAAY;AAUlB,SAAO,aAAa,OAAO,cAAc,CAAC;AAC1C,MAAI,WAAW,OAAO;AAatB,MAAM,OAAO,MAAM;AAEf,YAAQ,IAAI,GAAG,2BAA2B,SAAS;AAGnD,IAAC,IAAI,KAAK,EAAG,KAAK;AAGlB,QAAI,kBAAkB,IAAI,gBAAgB;AAC1C,oBAAgB,SAAS;AAAA,MACrB,KAAK,MAAM;AAEP,QAAC,IAAI,SAAS,EAAG,KAAK;AAAA,MAE1B;AAAA,IACJ;AACA,oBAAgB,cAAc;AAAA,EAClC;AAMA,MAAI,SAAS,eAAe,WAAW;AACnC,YAAQ,IAAI,mDAAmD;AAC/D,SAAK;AAAA,EACT,OAAO;AACH,YAAQ,IAAI,yCAAyC;AACrD,aAAS,iBAAiB,oBAAoB,IAAI;AAAA,EACtD;",
  "names": []
}
